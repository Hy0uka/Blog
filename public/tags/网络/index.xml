<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>网络 on 清夜无尘の一方天地</title>
    <link>https://wander1ng.com/tags/%E7%BD%91%E7%BB%9C/</link>
    <description>Recent content in 网络 on 清夜无尘の一方天地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>Copyright © 2019–2024</copyright>
    <lastBuildDate>Fri, 15 Nov 2024 10:29:53 +0800</lastBuildDate>
    
	<atom:link href="https://wander1ng.com/tags/%E7%BD%91%E7%BB%9C/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>复习HTTPS握手流程及相关扫描器</title>
      <link>https://wander1ng.com/post/%E5%A4%8D%E4%B9%A0https%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B/</link>
      <pubDate>Fri, 15 Nov 2024 10:29:53 +0800</pubDate>
      
      <guid>https://wander1ng.com/post/%E5%A4%8D%E4%B9%A0https%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B/</guid>
      <description>&lt;h4 id=&#34;0x01常见抓包工具charlesfiddlerwireshark区别&#34;&gt;0x01常见抓包工具Charles/Fiddler/Wireshark区别&lt;/h4&gt;
&lt;p&gt;为什么Charles等抓包工具或浏览器控制台看到的HTTPS是明文的？&lt;/p&gt;
&lt;p&gt;HTTPS其实相当于HTTP+TLS,HTTP是明文操作，所有的加解密操作都在TLS这边。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-f40a9f95639d4cee81dcb09d9b4adf70.r2.dev/blog/2024/11/7284e8bfe1801b74890299a2b1a6e594.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;浏览器控制台能看到明文HTTPS是因为浏览器是应用层，所以浏览器的输出都是TLS解密过的。&lt;/p&gt;
&lt;p&gt;Charles能看到是因为Charles抓包的时候有一个信任证书的操作，类似于中间人攻击。&lt;/p&gt;
&lt;p&gt;Fiddler和Charles都是用于抓取应用层协议等上层的数据，都是建立连接成功以后的数据。而Wireshark可以抓取所有协议的数据包，因为直接读取网卡数据。需要抓取HTTPS建立连接成功前的过程，所以选择Wireshark。&lt;/p&gt;
&lt;p&gt;Curl命令只发送一个请求，如果用浏览器打开百度，页面的各种资源也会发送请求，对分析造成很多不必要的数据包。&lt;/p&gt;
&lt;h4 id=&#34;0x01为什么指数数字签名证书需要hash一次&#34;&gt;0x01为什么指数数字签名证书需要hash一次&lt;/h4&gt;
&lt;p&gt;给证书明文签名和给明文的hash签名其实区别不大，但是对hash签名能让非对称加密的速度快很多。&lt;/p&gt;
&lt;h4 id=&#34;0x02传输流程&#34;&gt;0x02传输流程&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;三次握手&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端发送client_hello&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送server_hello&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送证书&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送Server Key Exchange&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送Server Hello Done&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;客户端发送Client_key_exchange+Change_cipher_spec+Encrypted_handshake_message&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送New Session Ticket&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送Change_cipher_spec&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;服务端发送Encrypted_handshake_message&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完成密钥协商，开始发送数据&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;完成数据发送，四次TCP挥手&lt;/strong&gt;：客户端FIN，服务端ACK，服务端FIN，客户端ACK。&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>